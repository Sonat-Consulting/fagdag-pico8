pico-8 cartridge // http://www.pico-8.com
version 18
__lua__

function _init()
  mapx = 0
  mapy = 0

  starttile, endtile = findstartend(mapx,mapy)
  heuristic = function(a,b)
    return coord.manhattandist(a,b)
  end

  path = {}
  callastar = function()
    return astar(starttile, endtile, heuristic, path)
  end

  cr = cocreate(callastar)  
  cls()
  map(mapx,mapy,0,0,128,128)
  print("s", starttile.x * 8, starttile.y * 8, 15)
  print("e", endtile.x * 8, endtile.y * 8, 0)
end

function _update()
  if (btnp(❎)) then
    if costatus(cr) != "dead" then
      coresume(cr)
    end
  end
end
 
function _draw()
end

function findstartend(mapno)
  local starttile = nil
  local endtile = nil

  for y=0,15 do
    for x=0,15 do
      tile = mget(mapx + x, mapy + y)
      if fget(tile, 1) then starttile = coord:new({x=x, y=y}) end
      if fget(tile, 2) then endtile = coord:new({x=x, y=y}) end
    end
  end
  return starttile, endtile
end

coord = {
	x = 0,
  y = 0,
}

function coord:new(o)
	self.__index = self
	return setmetatable(o or {}, self)
end

function coord.__eq(a,b)
  return a.x == b.x and a.y == b.y
end

function coord.__add(a,b)
  return coord:construct(a.x+b.x, a.y+b.y)
end

function coord.__sub(a,b)
  return coord:construct(a.x-b.x, a.y-b.y)
end

function coord:construct(x,y)
  return coord:new({x=x,y=y})
end

function coord.manhattandist(a, b)
  return abs(a.x - b.x) + abs(a.y - b.y)
end

function coord:isoutside()
  return self.x < 0 or self.x > 15 or self.y < 0 or self.y > 15
end

function coord:print(str, col)
  print(str, self.x * 8, self.y * 8, col)
end

function find(table, value)
  for item in all(table) do
    if item == value then
      return item
    end
  end
end

function astar(start, goal, heuristic)
  open = {}
  closed = {}
  directions = {
    coord:construct(-1,0),
    coord:construct(1,0),
    coord:construct(0,-1),
    coord:construct(0,1)
  }
  addopen(open, nil, start, heuristic, goal, path)
  while #open > 0 do
    current = takelowest(open)
    add(closed, current)
    current:print("█", 12)
    
    if current == goal then
      buildpath(current, path)
      return
    end

    for offset in all(directions) do
      neighbour = current + offset

      if find(closed, neighbour) then
        --ignore        
      elseif neighbour:isoutside() then 
        --ignore
      elseif not iswalkable(neighbour) then
        neighbour:print("❎", 0)
      else
        addopen(open, current, neighbour, heuristic, goal)
      end
    end
    yield()
  end
  return nil
end

function buildpath(coord, path)
  node = coord
  add(path, node)
  while node.parent != nil do
    add(path, node.parent)
    line(node.x * 8 + 4, node.y * 8 + 4, node.parent.x * 8 + 4, node.parent.y * 8 + 4, 7)
    node = node.parent
    yield()
  end
end

function iswalkable(coord)
  tile = mget(mapx + coord.x, mapy + coord.y)
  return not fget(tile, 0)
end

function addopen(open, parent, coord, heuristic, goal)
  coord.parent = parent
  if parent == nil then 
    coord.g = 0
  else
    coord.g = coord.parent.g + 1
  end
  coord.h = heuristic(coord, goal)
  coord.f = coord.g + coord.h

  for c in all(open) do
    if c == coord then
      if c.g <= coord.g then
        return 
      else
        del(open, c)
      end
    end
  end
  
  coord:print(coord.f, 0)
  add(open, coord)
end

function takelowest(list)
  lowest = list[#list]
  for i=#list,1,-1 do
  -- lowest = list[1]
  -- for i=1,#list do
    other = list[i]
    if other.f < lowest.f then lowest = other end
  end
  del(list, lowest)
  return lowest
end

__gfx__
bbbbbbbbbbbbbbbbccccccccbbbbbbbb88888888aaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
bbb3bb3bbb44444bccccccccbbb3bb3b88888888aaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
bb3bb3bbb444444bccccccccbb3bb3bb88888888aaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
bb3bb3bbb444464bccccccccbb3bb3bb88888888aaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
b3bb3bbbb446464bccccccccb3bb3bbb88888888aaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
b3bb3b3bb446444bccccccccb3bb3b3b88888888aaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
b3bb3b3bb44644bbccccccccb3bb3b3b88888888aaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbbbb444bbbccccccccbbbbbbbb88888888aaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0001010002040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0303030303030303030303030303030305030303030303030303030303030303030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030303030503030303030303030303030303030303030303030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303020203030303010101030303010303030303030303030303030303030303030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030203030303010101030303010303030303030303030303030303030303030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030202030303010101030301010301010101010101010101010101010103030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030302030303030301030103030303030303030303030303030303030303030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030302020303030303030303030303030303030303030303030303030303030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030302030303030303030303030303030303030303030303030303030303030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030301030303030303030303030303030303030303030303030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030102020202020203030303030303030303030303030303030303030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030103030303030303030303030303030303030303030303030303030303030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030302020303030303030303030303030303030303030303030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030202030303030303020303030303030303030303030303030303030303030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030202020301030303020203030303030303030303030303030303030303030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0302020202020303030303030303030303030303030303030303030303030303030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0403030303030303030303030303030304030303030303030303030303030303030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000003030303030303030303030303030303030303030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
